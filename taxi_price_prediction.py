# -*- coding: utf-8 -*-
"""Taxi-Price-Prediction

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jVmWP6Sq4DdBXmlURGTbNIiK7Lj5f4No
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
from sklearn.preprocessing import MinMaxScaler

# Загрузка данных
def load_data(file_path):
    data = pd.read_csv(file_path)
    return data

# Предобработка данных
def preprocess_data(data):
    data['tpep_pickup_datetime'] = pd.to_datetime(data['tpep_pickup_datetime'])

    data['hour'] = data['tpep_pickup_datetime'].dt.hour
    data['day_of_week'] = data['tpep_pickup_datetime'].dt.dayofweek + 1
    data['trip_distance'] = data['trip_distance'] * 1.60934

    if 'traffic_congestion' not in data.columns:
        import numpy as np
        data['traffic_congestion'] = np.random.randint(0, 3, size=len(data))

    data = data[['hour', 'day_of_week', 'trip_distance', 'traffic_congestion', 'tip_amount']]
    data = data.fillna(data.median())
    data = data[(data['tip_amount'] > 0) & (data['trip_distance'] > 0)]
    scaler = MinMaxScaler()
    feature_columns = ['trip_distance', 'hour', 'day_of_week', 'traffic_congestion']
    data[feature_columns] = scaler.fit_transform(data[feature_columns])

    return data, scaler, feature_columns

# Разделение данных на обучающую и тестовую выборки
def split_data(data):
    X = data[['hour', 'day_of_week', 'trip_distance', 'traffic_congestion']]
    y = data['tip_amount']
    return train_test_split(X, y, test_size=0.2, random_state=42)

# Обучение модели
def train_model(X_train, y_train):
    model = LinearRegression()
    model.fit(X_train, y_train)
    return model

# Оценка модели
def evaluate_model(model, X_test, y_test):
    predictions = model.predict(X_test)
    mse = mean_squared_error(y_test, predictions)
    print(f"Mean Squared Error: {mse:.2f}")
    return predictions

# Предсказание стоимости поездки
def predict_fare(model, scaler, feature_columns):
    try:
        hour = int(input("Введите час поездки (0-23): "))
        day_of_week = int(input("Введите день недели поездки (1 - Понедельник, 7 - Воскресенье): "))
        trip_distance = float(input("Введите расстояние поездки в километрах: "))
        traffic_congestion = int(input("Введите уровень загруженности дорог (0 - свободно, 1 - небольшая пробка, 2 - сильная пробка): "))

        if not (0 <= hour <= 23):
            raise ValueError("Час должен быть в диапазоне от 0 до 23.")
        if not (1 <= day_of_week <= 7):
            raise ValueError("День недели должен быть в диапазоне от 1 до 7.")
        if trip_distance <= 0:
            raise ValueError("Расстояние должно быть положительным.")
        if not (0 <= traffic_congestion <= 2):
            raise ValueError("Уровень загруженности должен быть 0, 1 или 2.")

        example = pd.DataFrame({
            "hour": [hour],
            "day_of_week": [day_of_week],
            "trip_distance": [trip_distance],
            "traffic_congestion": [traffic_congestion]
        })
        example[feature_columns] = scaler.transform(example[feature_columns])

        fare_usd = model.predict(example)[0]

        exchange_rate = 82
        fare_rub = fare_usd * exchange_rate

        print(f"Предсказанная стоимость поездки: ${fare_usd:.2f} (≈ {fare_rub:.2f} ₽)")
    except ValueError as ve:
        print(f"Ошибка ввода: {ve}")
    except Exception as e:
        print(f"Произошла ошибка: {e}")


if __name__ == "__main__":
    file_path = "/content/sample_data/test.csv"

    data = load_data(file_path)
    data, scaler, feature_columns = preprocess_data(data)
    X_train, X_test, y_train, y_test = split_data(data)
    model = train_model(X_train, y_train)
    predictions = evaluate_model(model, X_test, y_test)
    predict_fare(model, scaler, feature_columns)